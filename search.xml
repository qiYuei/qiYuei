<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>继承的几种方式</title>
      <link href="/2020/05/29/ji-cheng-de-ji-chong-fang-shi/"/>
      <url>/2020/05/29/ji-cheng-de-ji-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>面试官：说一说 JS 中的继承方式有哪些？以及各个继承方式的优缺点。<br>首先先来分析下这道面试题的考点有什么？首先是继承,继承有很多种方式基本上都离不开两个概念<code>原型</code>和<code>原型链</code>。然后就是这种继承的优缺点</p></blockquote><h3 id="课前知识"><a href="#课前知识" class="headerlink" title="课前知识"></a>课前知识</h3><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><p>首先每个JS对象都会有一个<code>__proto__</code>对象,而如果是一个函数的话的它的原型则是<code>prototype</code></p><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>对象中的每一个<code>__proto__</code>和<code>prototype</code>都指向原型的<code>__proto__</code>,这样一来就形成了一条原型链</p><h4 id="两者间的联系"><a href="#两者间的联系" class="headerlink" title="两者间的联系"></a>两者间的联系</h4><img src="/2020/05/29/ji-cheng-de-ji-chong-fang-shi/1.png" class><p>这张图看上去第一眼就跟清明上河图一般都没有哈哈哈哈,反正我第一次看这张图是不懂。一坨一坨的很难懂。<br>那我们就来将它拆解分析。首先我们需要知道的是</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// true</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>__proto__ <span class="token comment" spellcheck="true">// false</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>由上面可以得出一个结论</p><ol><li>每一个对象都有一个<code>__proto__</code>属性,而这个属性指向<code>JS</code>全局函数<code>Object</code>的<code>prototype</code>。</li><li>全局函数<code>Object</code>的<code>prototype</code>上面的<code>__proto__</code>指向原型链的终点<code>null</code><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> foo <span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span><span class="token keyword">let</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token string">'小王'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">let</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token string">'小绿'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> foo<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// true</span>f2<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> foo<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// true</span>f1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> f1<span class="token punctuation">.</span>constructor <span class="token comment" spellcheck="true">// false</span>f1 <span class="token operator">===</span> f2 <span class="token comment" spellcheck="true">// false</span>f1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> f2<span class="token punctuation">.</span>__proto__ <span class="token comment" spellcheck="true">// true</span>f1 <span class="token keyword">instanceof</span> <span class="token class-name">foo</span> <span class="token comment" spellcheck="true">// true</span></code></pre>上面的代码可能你一时间还看不懂。那我就上另一张神图<img src="/2020/05/29/ji-cheng-de-ji-chong-fang-shi/2.png" class>这样是不是就清楚多了呀。那我们来整理一下结论</li></ol><ul><li>通过函数<code>new</code>出来的实例,它的<code>__proto__</code>指向构造函数的<code>prototype</code></li><li><code>prototype</code>指向的就是原型对象，原型对象放的就是对象共享的属性</li><li>原型对象里有一个<code>constructor</code>属性，这个属性又指回了构造函数。<br>总结出来一句话就是<blockquote><p>构造函数的 prototype 指向原型对象，原型对象有一个 constructor 属性指回构造函数，每个构造函数生成的实例对象都有一个 proto 属性，这个属性指向原型对象。</p></blockquote><img src="/2020/05/29/ji-cheng-de-ji-chong-fang-shi/3.png" class><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3></li></ul><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token keyword">this</span><span class="token punctuation">.</span>play <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">dog</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span>type<span class="token punctuation">}</span>dog<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token string">'小猫'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">let</span> ccc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dog</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">let</span> ddd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dog</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><img src="/2020/05/29/ji-cheng-de-ji-chong-fang-shi/4.png" class><p>由图上的结果,我只对<code>ccc</code>实例上的<code>play</code>数组但是<code>ddd</code>实例上<code>play</code>也跟着改变了。因为两个实例使用的是同一个原型对象。</p><h4 id="最经典的call-方式"><a href="#最经典的call-方式" class="headerlink" title="最经典的call()方式"></a>最经典的call()方式</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token keyword">this</span><span class="token punctuation">.</span>play <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你要我说什么'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">dog</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>   foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">}</span><span class="token keyword">let</span> csd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dog</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'小李'</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">let</span> tce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dog</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'小王'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>csd<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>csd<span class="token punctuation">.</span>play<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">555</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tce<span class="token punctuation">.</span>play<span class="token punctuation">)</span>csd<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>tce<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="/2020/05/29/ji-cheng-de-ji-chong-fang-shi/5.png" class><p>上图的结果很明显,虽然解决了使用同一个原型对象的问题。但是我们却没法调用原本加在<code>foo.prototype</code>的方法</p><h4 id="组合式"><a href="#组合式" class="headerlink" title="组合式"></a>组合式</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token keyword">this</span><span class="token punctuation">.</span>play <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">dog</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>     foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span>type<span class="token punctuation">}</span>dog<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token string">'小猫'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>这个组合的方式很明显就是吧上面两个的方式组合起来了。但是这样相当于调用了两次<code>foo</code>造成了不必要的新能浪费</p><h4 id="组合式优化"><a href="#组合式优化" class="headerlink" title="组合式优化"></a>组合式优化</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token keyword">this</span><span class="token punctuation">.</span>play <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">dog</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>     foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span>type<span class="token punctuation">}</span>dog<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  dog<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> dog<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 重新吧constructor 指向原来的dog</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试必备系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 继承 </tag>
            
            <tag> 原型链 </tag>
            
            <tag> 原型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0开始实现一个Promise</title>
      <link href="/2020/05/28/cong-0-kai-shi-shi-xian-yi-ge-promise/"/>
      <url>/2020/05/28/cong-0-kai-shi-shi-xian-yi-ge-promise/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在早期处理异步的方式都是采用回调函数的形式,比如<code>nodeApi</code>,多个回调中就形成了回调多层嵌套(也叫回调地狱)。后来出现的<code>generater</code>和<code>Promise</code>解决了回调地狱的问题。<br><code>Promise</code> 是 <code>JavaScript</code> 异步编程的一种流行解决方案，它的出现是为了解决 回调地狱 的问题，让使用者可以通过链式的写法去编写写异步代码，具体的用法笔者就不介绍了，大家可以参考阮一峰老师的 ES6 Promise教程。</p><h3 id="课前知识"><a href="#课前知识" class="headerlink" title="课前知识"></a>课前知识</h3><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>发布观察者模式简单的来说比如场景中有用户、代理商、总公司三种身份。用户通过下单告诉总公司我要订牛奶,总公司告诉代理商xx用户定了牛奶要给他送去。这种就形成了一种观察者的模式 由用户做为被观察者 总公司做为观察者观察用户的需求并由中间商执行用户需求。</p><blockquote><p>发布订阅模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。<br><code>Promise</code> 是基于 观察者的设计模式 实现的，<code>then</code> 函数要执行的函数会被塞入观察者数组中，当 <code>Promise</code> 状态变化的时候，就去执行观察组数组中的所有函数。</p></blockquote><h4 id="事件循环机制（EventLoop）"><a href="#事件循环机制（EventLoop）" class="headerlink" title="事件循环机制（EventLoop）"></a>事件循环机制（EventLoop）</h4><p>EventLoop主要分为<code>宏任务</code>和<code>微任务</code>两种形式。</p><p>在浏览器中<code>宏任务</code>主要分为</p><ul><li><code>setTimeOut</code></li><li><code>setInterval</code></li><li><code>ui渲染</code><br>而微任务主要有<code>Promise</code>,<code>MotationObserver</code>等<br>再来看一道经典题目<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>最终打印为  1 3 6 4 5 2</p></blockquote></li></ul><h4 id="PromiseA-规范"><a href="#PromiseA-规范" class="headerlink" title="PromiseA+规范"></a>PromiseA+规范</h4><p><code>PromiseA+</code>规范是在<code>Promise</code>社区中应该遵循的规范。或者说遵循它的规范你所写的<code>Promise</code>才会被认可。在npm上有一个包<code>promise-aplus-tests</code>这个包中有大量的测试用例来检验是否符合此规范。</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>我们在学习的过程中需要带着问题(脑子)去思考为什么我们要这样做</p><ul><li><code>Promise</code> 中是如何实现回调函数返回值穿透的？</li><li><code>Promise</code> 出错后，是怎么通过 冒泡 传递给最后那个捕获异常的函数？</li><li><code>Promise</code> 如何支持链式调用？</li><li>怎么将 <code>Promise.then</code> 包装成一个微任务？</li></ul><h3 id="一步步实现Promise"><a href="#一步步实现Promise" class="headerlink" title="一步步实现Promise"></a>一步步实现Promise</h3><h4 id="Promise三种状态"><a href="#Promise三种状态" class="headerlink" title="Promise三种状态"></a>Promise三种状态</h4><p>因为我们要遵循<code>promiseA+</code>规范所以我们就完全按照文档的描述来写</p><img src="/2020/05/28/cong-0-kai-shi-shi-xian-yi-ge-promise/status.png" class title="Promise状态规则"><p>图片的大概意思就是<code>Promise</code>有三种状态分别为<code>pending</code> 、<code>fulfilled</code> 、<code>rejected</code><br>且padding状态可以转化成<code>fulfilled</code>或者<code>rejected</code>状态<br>而<code>fulfillded</code>和<code>rejected</code>不能转换成其他状态</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> PADDING <span class="token operator">=</span> <span class="token string">'padding'</span><span class="token keyword">const</span> FULFILLED <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token keyword">const</span> REJECTED <span class="token operator">=</span> <span class="token string">'rejected'</span></code></pre><h4 id="executor执行器"><a href="#executor执行器" class="headerlink" title="executor执行器"></a>executor执行器</h4><p>在Promise中会都有一个<code>executor</code>它在<code>new Promise()</code>的时候就要执行,这个<code>executor</code>中还有两个回调分别是<code>resolve</code>和<code>reject</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MyPromise</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 初始化Promise</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> PADDING <span class="token comment" spellcheck="true">// 当前的状态</span>     <span class="token comment" spellcheck="true">// 定义resolve和reject</span>     <span class="token keyword">let</span> resolve <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 是一个函数成功回调</span>     <span class="token punctuation">}</span>      <span class="token keyword">let</span> reject <span class="token operator">=</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 失败的回调</span>     <span class="token punctuation">}</span>         <span class="token keyword">try</span><span class="token punctuation">{</span>           <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 同步执行</span>       <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的代码是不是就可以很好地解释为什么<code>new Promise(()=&gt;{ //todo... 是同步执行的 })</code>的问题啦。</p><h4 id="then-方法"><a href="#then-方法" class="headerlink" title="then()方法"></a>then()方法</h4><p>用过<code>Promise</code>的都知道会有一个<code>then()</code>方法。让我们来看下<code>PromiseA+</code>中是怎么定义这个<code>then</code>的</p><img src="/2020/05/28/cong-0-kai-shi-shi-xian-yi-ge-promise/then3.png" class title="then()参数规则"><p>首先<code>then()</code>方法一样接收两个回调<code>onFulfilled</code> 和<code>onRejected</code>。并且只有<code>status</code>的状态为<code>fulfilled</code>的时候才能执行<code>onFulfilled</code>回调,只有<code>status</code>的状态为<code>rejected</code>的时候才能执行<code>onRejected</code>回调。如果<code>padding</code>的状态说明<code>new Promise(()=&gt;{// 这里有异步方法})</code>就需要将他的回调放入一个专门的数组中等到状不为<code>padding</code>的时候再依次执行回调。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MyPromise</span><span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 存放成功回调</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCb <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true">// 存放失败回调</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCb <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true">// 定义resolve和reject</span>     <span class="token keyword">let</span> resolve <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 是一个函数成功回调</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PADDING<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 执行异步回调</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onFulfilledCb</span><span class="token punctuation">(</span>cb<span class="token operator">=</span><span class="token operator">></span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>      <span class="token keyword">let</span> reject <span class="token operator">=</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 失败的回调</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PADDING<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onRejectedCb</span><span class="token punctuation">(</span>cb<span class="token operator">=</span><span class="token operator">></span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//首先判断 两个参数是不是方法 不是的话就构造成方法</span>  <span class="token comment" spellcheck="true">// 这里很妙 这里也叫透传参 下面会介绍到</span>  <span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> onFulfilled<span class="token punctuation">:</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>val  <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> onRejected <span class="token punctuation">:</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">throw</span> reason<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 状态为 fulfilled </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> FULFILLED<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 状态为 Reject </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> REJECTED<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 状态为padding</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PADDING<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCb<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCb<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="传参透传"><a href="#传参透传" class="headerlink" title="传参透传"></a>传参透传</h4><blockquote><p> 表面意思就是 .then().then(res=&gt;{// 我依然可以接收到参数}).catch(e=&gt;{// 我可以最后再捕获错误})<br>还记得 typeof onFulfilled === ‘function’ ? onFulfilled: (val)=&gt;val 当 then 中没有传任何参数的时候，Promise 会使用内部默认的定义的方法，将结果传递给下一个 then。</p></blockquote><img src="/2020/05/28/cong-0-kai-shi-shi-xian-yi-ge-promise/then4.png" class><p>图片大概的意思就是</p><ul><li><code>then()</code>方法必须返回一个新的<code>Promise</code></li><li>用变量<code>x</code>接收<code>onFulfilled</code>、<code>onRejected</code> 参数的返回值</li><li>并且需要判断变量<code>x</code>是不是一个新的<code>Promise</code> 。则需要返回新<code>Promise</code>的<code>resolve()</code>值<br>既然这样那我们就按照它的要求来重新编写then方法<pre class=" language-js"><code class="language-js"><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">let</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> onFulfilled<span class="token punctuation">:</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>val<span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> onRejected <span class="token punctuation">:</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">throw</span> reason<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 状态为 fulfilled </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> FULFILLED<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 这里还要判断x 是否为Promise</span>    <span class="token function">reslovePromise</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>promise2<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 状态为 Reject </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> REJECTED<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 这里还要判断x 是否为Promise</span>    <span class="token function">reslovePromise</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>promise2<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 状态为padding</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PADDING<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCb<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里还要判断x 是否为Promise</span>      <span class="token function">reslovePromise</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>promise2<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCb<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里还要判断x 是否为Promise</span>     <span class="token keyword">let</span> x <span class="token operator">=</span>  <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">reslovePromise</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>promise2<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回一个新的Promise</span><span class="token keyword">return</span> promise2<span class="token punctuation">}</span></code></pre>咦,好像不知不觉又解决了一个问题<blockquote><p>Promise如何实现链式调用<br>因为在then() 方法中永远返回了一个新的Promise实例 新的Promise实例上有then()方法<br>上面这一版<code>then()</code>看上去并没有上面问题。运行起来会报错,</p><img src="/2020/05/28/cong-0-kai-shi-shi-xian-yi-ge-promise/err.png" class><p>这是因为在new 过程中并没有 并没有还没有定义promise2这个变量 所以就会报这个错误<br>在这里应该是需要引入一个微任务来包裹 比如 <code>process.nextTick</code>、<code>MutationObserver</code>、<code>postMessage</code><br>这里暂且用setTimeOut包裹看下效果</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">let</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> onFulfilled<span class="token punctuation">:</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>val<span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> onRejected <span class="token punctuation">:</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">throw</span> reason<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 状态为 fulfilled </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> FULFILLED<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 这里还要判断x 是否为Promise</span>     <span class="token function">reslovePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 状态为 Reject </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> REJECTED<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 这里还要判断x 是否为Promise</span>    <span class="token function">reslovePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 状态为padding</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PADDING<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCb<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里还要判断x 是否为Promise</span>      <span class="token function">reslovePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCb<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里还要判断x 是否为Promise</span>     <span class="token keyword">let</span> x <span class="token operator">=</span>  <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">reslovePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回一个新的Promise</span><span class="token keyword">return</span> promise2<span class="token punctuation">}</span></code></pre>这样就能顺利拿到<code>promise2</code>啦。紧接着就要编写<code>reslovePromise</code>方法</li></ul><h4 id="reslovePromise"><a href="#reslovePromise" class="headerlink" title="reslovePromise()"></a>reslovePromise()</h4><img src="/2020/05/28/cong-0-kai-shi-shi-xian-yi-ge-promise/then5.png" class><p>上图主要内容有</p><ul><li><p>如果 变量<code>x</code>的值跟<code>Promise2</code>是同一个就要抛出错误(没有返回新的<code>Promise</code>)</p></li><li><p>判断<code>x</code>是不是一个<code>Promise</code>(<code>object</code>||<code>function</code>)</p><ul><li>获取<code>x.then</code>并且判断是否为<code>function</code>,不是也直接<code>resolve(x)</code><ul><li>用<code>call</code>方式执行<code>x.then()</code>方法,成功的回调为 <code>y</code> 失败的回调为 <code>r</code><ul><li>递归使用 <code>reslovePromise()</code>防止<code>x.then()</code>的结果<code>y</code>也是<code>Promise</code></li><li>如果当前<code>Promise</code>已经被<code>called</code>那就<code>return</code></li></ul></li></ul></li></ul></li><li><p><code>x</code> 不是<code>Promise</code>就直接<code>resolve(x)</code> </p><pre class=" language-js"><code class="language-js"><span class="token function">reslovePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">===</span> promise2 <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'不能返回本身Promise,Chaining cycle detected for promise #&lt;Promise>'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> called<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">!==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token operator">===</span><span class="token string">'function'</span><span class="token operator">||</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      then<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span>         <span class="token punctuation">}</span>        called <span class="token operator">=</span> <span class="token boolean">true</span>         <span class="token function">reslovePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>y<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span>         <span class="token punctuation">}</span>        called <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span>         <span class="token punctuation">}</span>        called <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>就这样我们就完成了一个符合<code>PromiseA+</code>的<code>Promise</code>啦<del>~</del></p><h3 id="测试是否符合PromiseA-规范"><a href="#测试是否符合PromiseA-规范" class="headerlink" title="测试是否符合PromiseA+规范"></a>测试是否符合PromiseA+规范</h3><p>使用官方测试包<code>npm i promises-aplus-tests -g</code><br>编写测试脚本</p><pre class=" language-js"><code class="language-js">MyPromise<span class="token punctuation">.</span>defer <span class="token operator">=</span> MyPromise<span class="token punctuation">.</span>deferred <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">let</span> dfd <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>dfd<span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPrmose</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  dfd<span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve  dfd<span class="token punctuation">.</span>reject <span class="token operator">=</span> reject<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span> dfd<span class="token punctuation">}</span></code></pre><img src="/2020/05/28/cong-0-kai-shi-shi-xian-yi-ge-promise/pass.png" class><p>咳咳好像全部通过了哈哈哈哈哈哈!在这里给自己点个赞赞赞</p><h3 id="catch"><a href="#catch" class="headerlink" title="catch()"></a>catch()</h3><p>之前我们已经在<code>then()</code>中实现了参数透传,聪明的是不是很容易就想到<code>catch</code>是怎么实现的了？<br>没错就是这么简单</p><pre class=" language-js"><code class="language-js"><span class="token keyword">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve()"></a>resolve()</h3><p><code>resolve()</code>是一个静态方法。实际上就是创造一个<code>Promise</code>对象。创造一个微任务</p><pre class=" language-js"><code class="language-js"><span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="reject"><a href="#reject" class="headerlink" title="reject()"></a>reject()</h3><p><code>reject()</code>和<code>resolve()</code>一样是<code>Promise</code>的静态方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token function">reject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="all"><a href="#all" class="headerlink" title="all()"></a>all()</h3><p><code>Promise.all()</code>是一个静态方法,它能接受一个数组,数组里面可以是任意值(包括<code>Promise</code>)。它有一个规则就是将值依次放入到新的数组中。如果遇到错误则会<code>reject()</code>并不会往下执行。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> isPromise <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> n<span class="token operator">!==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span><span class="token keyword">typeof</span> n <span class="token operator">===</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">typeof</span> n<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">'function'</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>     <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token keyword">const</span> forMatter <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span>i<span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>          data<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>             newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>res <span class="token comment" spellcheck="true">// 保证 值的位置不会错</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>           newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>res         <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span>length <span class="token operator">===</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当新数组和原来数组长度相等的时候就表示成功了</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token function">forMatter</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">forMatter</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="finally"><a href="#finally" class="headerlink" title="finally()"></a>finally()</h3><p><code>finally()</code>方法是ES9中提出,且只能在高版本中有用。是在<code>Promise</code>的<code>resolve()</code>和<code>reject()</code>之后都会执行的钩子函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">finally</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token function">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>   <span class="token function">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">throw</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 手写系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
            <tag> 链式调用 </tag>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现一个new关键字</title>
      <link href="/2020/05/27/shi-xian-yi-ge-new-guan-jian-zi/"/>
      <url>/2020/05/27/shi-xian-yi-ge-new-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h3 id="new关键字做了什么事"><a href="#new关键字做了什么事" class="headerlink" title="new关键字做了什么事"></a>new关键字做了什么事</h3><ol><li><p>创建一个新的对象</p></li><li><p>将构造函数的原型链赋值到新的对象中</p></li><li><p>构造函数中是否返回引用类型的值不是则返回创建的对象</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span><span class="token operator">...</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 1.创建新对象</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2. 将构造函数的原型链赋值到新的对象中</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> ctx<span class="token punctuation">.</span>prototype<span class="token comment" spellcheck="true">// 3构造函数中是否返回引用类型的值不是则返回创建的对象</span><span class="token keyword">let</span> result <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">typeof</span> result<span class="token operator">===</span><span class="token string">'object'</span>  <span class="token operator">?</span> result <span class="token punctuation">:</span> obj <span class="token punctuation">}</span></code></pre><h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> foo <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">}</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不要问我年龄,问就是18'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> newFoo <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span><span class="token string">'小明'</span><span class="token punctuation">)</span>newFoo<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// 小明</span>newFoo<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不要问我年龄,问就是18</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 手写系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> new </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6模块和commonJS模块</title>
      <link href="/2020/05/27/es6-mo-kuai-he-commonjs-mo-kuai/"/>
      <url>/2020/05/27/es6-mo-kuai-he-commonjs-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>模块化主要有<code>AMD</code>、<code>CMD</code>、<code>commonJS</code>、<code>Es6</code></p><ul><li><code>AMD</code>是基于<code>require.js</code> 它推崇 依赖前置</li><li><code>CMD</code>是基于<code>sea.js</code> 它推崇 依赖就近</li><li><code>common.js</code>也就是服务端的模块化(node)</li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="common-js"><a href="#common-js" class="headerlink" title="common.js"></a>common.js</h4><p><code>common.js</code>的模块化规范主要用于服务端(node),它主要是通过在<code>module.exports</code>上挂载属性</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// a.js</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    i<span class="token punctuation">,</span>    add<span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// b.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span>add<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'a.js'</span><span class="token punctuation">)</span></code></pre><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><p><code>Es6</code>主要是通过<code>import export export default</code>等关键字</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// a.js</span><span class="token keyword">export</span> y <span class="token operator">=</span><span class="token number">1</span><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    add<span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// b.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token punctuation">,</span> add <span class="token keyword">from</span> <span class="token string">'a.js'</span></code></pre><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><code>common.js</code>引用的是值的拷贝,<code>es6</code>输出的是值的引用</li><li><code>common.js</code>是运行是加载,<code>es6</code>是编译时输出接口(天然支持<code>tree-shark</code>)<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// a.js</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">let</span> y <span class="token operator">=</span><span class="token number">1</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  y<span class="token operator">++</span>  <span class="token keyword">return</span> i<span class="token punctuation">.</span>a<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">let</span> ii <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">let</span> yy <span class="token operator">=</span><span class="token number">1</span><span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> ii<span class="token punctuation">.</span>a<span class="token operator">++</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  i<span class="token punctuation">,</span>add<span class="token punctuation">,</span>y<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span>  <span class="token punctuation">{</span>  ii<span class="token punctuation">,</span>add2<span class="token punctuation">,</span>yy<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// b.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span>i<span class="token punctuation">,</span>y<span class="token punctuation">,</span>add<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'a.js'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {a:1} 1</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {a:2} 1</span><span class="token keyword">import</span> x <span class="token keyword">from</span> <span class="token string">'a.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>ii<span class="token punctuation">,</span>x<span class="token punctuation">.</span>yy<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {a:1} 1</span>x<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>ii<span class="token punctuation">,</span>x<span class="token punctuation">.</span>yy<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {a:2} 2</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> import </tag>
            
            <tag> commonJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/27/hello-world/"/>
      <url>/2020/05/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
