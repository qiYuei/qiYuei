<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从0开始实现一个Promise</title>
      <link href="/2020/05/28/cong-0-kai-shi-shi-xian-yi-ge-promise/"/>
      <url>/2020/05/28/cong-0-kai-shi-shi-xian-yi-ge-promise/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在早期处理异步的方式都是采用回调函数的形式,比如<code>nodeApi</code>,多个回调中就形成了回调多层嵌套(也叫回调地狱)。后来出现的<code>generater</code>和<code>Promise</code>解决了回调地狱的问题。<br><code>Promise</code> 是 <code>JavaScript</code> 异步编程的一种流行解决方案，它的出现是为了解决 回调地狱 的问题，让使用者可以通过链式的写法去编写写异步代码，具体的用法笔者就不介绍了，大家可以参考阮一峰老师的 ES6 Promise教程。</p><h3 id="课前知识"><a href="#课前知识" class="headerlink" title="课前知识"></a>课前知识</h3><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>发布观察者模式简单的来说比如场景中有用户、代理商、总公司三种身份。用户通过下单告诉总公司我要订牛奶,总公司告诉代理商xx用户定了牛奶要给他送去。这种就形成了一种观察者的模式 由用户做为被观察者 总公司做为观察者观察用户的需求并由中间商执行用户需求。</p><blockquote><p>发布订阅模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。<br><code>Promise</code> 是基于 观察者的设计模式 实现的，<code>then</code> 函数要执行的函数会被塞入观察者数组中，当 <code>Promise</code> 状态变化的时候，就去执行观察组数组中的所有函数。</p></blockquote><h4 id="事件循环机制（EventLoop）"><a href="#事件循环机制（EventLoop）" class="headerlink" title="事件循环机制（EventLoop）"></a>事件循环机制（EventLoop）</h4><p>EventLoop主要分为<code>宏任务</code>和<code>微任务</code>两种形式。</p><p>在浏览器中<code>宏任务</code>主要分为</p><ul><li><code>setTimeOut</code></li><li><code>setInterval</code></li><li><code>ui渲染</code><br>而微任务主要有<code>Promise</code>,<code>MotationObserver</code>等<br>再来看一道经典题目<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>最终打印为  1 3 6 4 5 2</p></blockquote></li></ul><h4 id="PromiseA-规范"><a href="#PromiseA-规范" class="headerlink" title="PromiseA+规范"></a>PromiseA+规范</h4><p><code>PromiseA+</code>规范是在<code>Promise</code>社区中应该遵循的规范。或者说遵循它的规范你所写的<code>Promise</code>才会被认可。在npm上有一个包<code>promise-aplus-tests</code>这个包中有大量的测试用例来检验是否符合此规范。</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>我们在学习的过程中需要带着问题(脑子)去思考为什么我们要这样做</p><ul><li><code>Promise</code> 中是如何实现回调函数返回值穿透的？</li><li><code>Promise</code> 出错后，是怎么通过 冒泡 传递给最后那个捕获异常的函数？</li><li><code>Promise</code> 如何支持链式调用？</li><li>怎么将 <code>Promise.then</code> 包装成一个微任务？</li></ul><h3 id="一步步实现Promise"><a href="#一步步实现Promise" class="headerlink" title="一步步实现Promise"></a>一步步实现Promise</h3><h4 id="Promise三种状态"><a href="#Promise三种状态" class="headerlink" title="Promise三种状态"></a>Promise三种状态</h4><p>因为我们要遵循<code>promiseA+</code>规范所以我们就完全按照文档的描述来写<br><img src="/qiYuei/qiYuei.github/status.png" alt="status"></p>]]></content>
      
      
      <categories>
          
          <category> 手写系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
            <tag> 链式调用 </tag>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现一个new关键字</title>
      <link href="/2020/05/27/shi-xian-yi-ge-new-guan-jian-zi/"/>
      <url>/2020/05/27/shi-xian-yi-ge-new-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h3 id="new关键字做了什么事"><a href="#new关键字做了什么事" class="headerlink" title="new关键字做了什么事"></a>new关键字做了什么事</h3><ol><li><p>创建一个新的对象</p></li><li><p>将构造函数的原型链赋值到新的对象中</p></li><li><p>构造函数中是否返回引用类型的值不是则返回创建的对象</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span><span class="token operator">...</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 1.创建新对象</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2. 将构造函数的原型链赋值到新的对象中</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> ctx<span class="token punctuation">.</span>prototype<span class="token comment" spellcheck="true">// 3构造函数中是否返回引用类型的值不是则返回创建的对象</span><span class="token keyword">let</span> result <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">typeof</span> result<span class="token operator">===</span><span class="token string">'object'</span>  <span class="token operator">?</span> result <span class="token punctuation">:</span> obj <span class="token punctuation">}</span></code></pre><h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> foo <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">}</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不要问我年龄,问就是18'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> newFoo <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span><span class="token string">'小明'</span><span class="token punctuation">)</span>newFoo<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// 小明</span>newFoo<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不要问我年龄,问就是18</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 手写系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> new </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6模块和commonJS模块</title>
      <link href="/2020/05/27/es6-mo-kuai-he-commonjs-mo-kuai/"/>
      <url>/2020/05/27/es6-mo-kuai-he-commonjs-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>模块化主要有<code>AMD</code>、<code>CMD</code>、<code>commonJS</code>、<code>Es6</code></p><ul><li><code>AMD</code>是基于<code>require.js</code> 它推崇 依赖前置</li><li><code>CMD</code>是基于<code>sea.js</code> 它推崇 依赖就近</li><li><code>common.js</code>也就是服务端的模块化(node)</li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="common-js"><a href="#common-js" class="headerlink" title="common.js"></a>common.js</h4><p><code>common.js</code>的模块化规范主要用于服务端(node),它主要是通过在<code>module.exports</code>上挂载属性</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// a.js</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    i<span class="token punctuation">,</span>    add<span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// b.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span>add<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'a.js'</span><span class="token punctuation">)</span></code></pre><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><p><code>Es6</code>主要是通过<code>import export export default</code>等关键字</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// a.js</span><span class="token keyword">export</span> y <span class="token operator">=</span><span class="token number">1</span><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    add<span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// b.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token punctuation">,</span> add <span class="token keyword">from</span> <span class="token string">'a.js'</span></code></pre><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><code>common.js</code>引用的是值的拷贝,<code>es6</code>输出的是值的引用</li><li><code>common.js</code>是运行是加载,<code>es6</code>是编译时输出接口(天然支持<code>tree-shark</code>)<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// a.js</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">let</span> y <span class="token operator">=</span><span class="token number">1</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  y<span class="token operator">++</span>  <span class="token keyword">return</span> i<span class="token punctuation">.</span>a<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">let</span> ii <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">let</span> yy <span class="token operator">=</span><span class="token number">1</span><span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> ii<span class="token punctuation">.</span>a<span class="token operator">++</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  i<span class="token punctuation">,</span>add<span class="token punctuation">,</span>y<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span>  <span class="token punctuation">{</span>  ii<span class="token punctuation">,</span>add2<span class="token punctuation">,</span>yy<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// b.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span>i<span class="token punctuation">,</span>y<span class="token punctuation">,</span>add<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'a.js'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {a:1} 1</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {a:2} 1</span><span class="token keyword">import</span> x <span class="token keyword">from</span> <span class="token string">'a.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>ii<span class="token punctuation">,</span>x<span class="token punctuation">.</span>yy<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {a:1} 1</span>x<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>ii<span class="token punctuation">,</span>x<span class="token punctuation">.</span>yy<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {a:2} 2</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> import </tag>
            
            <tag> commonJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/27/hello-world/"/>
      <url>/2020/05/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
